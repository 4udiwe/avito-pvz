// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go
//
// Generated by this command:
//
//	mockgen -source=contracts.go -destination=mocks/mock_service.go
//

// Package mock_delete_product is a generated GoMock package.
package mock_delete_product

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockProductService is a mock of ProductService interface.
type MockProductService struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceMockRecorder
	isgomock struct{}
}

// MockProductServiceMockRecorder is the mock recorder for MockProductService.
type MockProductServiceMockRecorder struct {
	mock *MockProductService
}

// NewMockProductService creates a new mock instance.
func NewMockProductService(ctrl *gomock.Controller) *MockProductService {
	mock := &MockProductService{ctrl: ctrl}
	mock.recorder = &MockProductServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductService) EXPECT() *MockProductServiceMockRecorder {
	return m.recorder
}

// DeleteLastProductFromReception mocks base method.
func (m *MockProductService) DeleteLastProductFromReception(ctx context.Context, pointID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLastProductFromReception", ctx, pointID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLastProductFromReception indicates an expected call of DeleteLastProductFromReception.
func (mr *MockProductServiceMockRecorder) DeleteLastProductFromReception(ctx, pointID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLastProductFromReception", reflect.TypeOf((*MockProductService)(nil).DeleteLastProductFromReception), ctx, pointID)
}
