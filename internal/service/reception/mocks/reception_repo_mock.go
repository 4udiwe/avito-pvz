// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go
//
// Generated by this command:
//
//	mockgen -source=contracts.go -destination=mocks/reception_repo_mock.go
//

// Package mock_reception is a generated GoMock package.
package mock_reception

import (
	context "context"
	reflect "reflect"

	entity "github.com/4udiwe/avito-pvz/internal/entity"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockReceptionRepository is a mock of ReceptionRepository interface.
type MockReceptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReceptionRepositoryMockRecorder
	isgomock struct{}
}

// MockReceptionRepositoryMockRecorder is the mock recorder for MockReceptionRepository.
type MockReceptionRepositoryMockRecorder struct {
	mock *MockReceptionRepository
}

// NewMockReceptionRepository creates a new mock instance.
func NewMockReceptionRepository(ctrl *gomock.Controller) *MockReceptionRepository {
	mock := &MockReceptionRepository{ctrl: ctrl}
	mock.recorder = &MockReceptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceptionRepository) EXPECT() *MockReceptionRepositoryMockRecorder {
	return m.recorder
}

// CheckIfPointExists mocks base method.
func (m *MockReceptionRepository) CheckIfPointExists(ctx context.Context, pointID uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfPointExists", ctx, pointID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfPointExists indicates an expected call of CheckIfPointExists.
func (mr *MockReceptionRepositoryMockRecorder) CheckIfPointExists(ctx, pointID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfPointExists", reflect.TypeOf((*MockReceptionRepository)(nil).CheckIfPointExists), ctx, pointID)
}

// CloseLastReception mocks base method.
func (m *MockReceptionRepository) CloseLastReception(ctx context.Context, pointID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseLastReception", ctx, pointID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseLastReception indicates an expected call of CloseLastReception.
func (mr *MockReceptionRepositoryMockRecorder) CloseLastReception(ctx, pointID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseLastReception", reflect.TypeOf((*MockReceptionRepository)(nil).CloseLastReception), ctx, pointID)
}

// GetLastReceptionProductsAmount mocks base method.
func (m *MockReceptionRepository) GetLastReceptionProductsAmount(ctx context.Context, pointID uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastReceptionProductsAmount", ctx, pointID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastReceptionProductsAmount indicates an expected call of GetLastReceptionProductsAmount.
func (mr *MockReceptionRepositoryMockRecorder) GetLastReceptionProductsAmount(ctx, pointID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastReceptionProductsAmount", reflect.TypeOf((*MockReceptionRepository)(nil).GetLastReceptionProductsAmount), ctx, pointID)
}

// GetLastReceptionStatus mocks base method.
func (m *MockReceptionRepository) GetLastReceptionStatus(ctx context.Context, pointID uuid.UUID) (entity.ReceptionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastReceptionStatus", ctx, pointID)
	ret0, _ := ret[0].(entity.ReceptionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastReceptionStatus indicates an expected call of GetLastReceptionStatus.
func (mr *MockReceptionRepositoryMockRecorder) GetLastReceptionStatus(ctx, pointID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastReceptionStatus", reflect.TypeOf((*MockReceptionRepository)(nil).GetLastReceptionStatus), ctx, pointID)
}

// Open mocks base method.
func (m *MockReceptionRepository) Open(ctx context.Context, pointID uuid.UUID) (entity.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", ctx, pointID)
	ret0, _ := ret[0].(entity.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockReceptionRepositoryMockRecorder) Open(ctx, pointID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockReceptionRepository)(nil).Open), ctx, pointID)
}
