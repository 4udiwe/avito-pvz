// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go
//
// Generated by this command:
//
//	mockgen -source=contracts.go -destination=mocks/repo_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/4udiwe/avito-pvz/internal/entity"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockPointRepository is a mock of PointRepository interface.
type MockPointRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPointRepositoryMockRecorder
	isgomock struct{}
}

// MockPointRepositoryMockRecorder is the mock recorder for MockPointRepository.
type MockPointRepositoryMockRecorder struct {
	mock *MockPointRepository
}

// NewMockPointRepository creates a new mock instance.
func NewMockPointRepository(ctrl *gomock.Controller) *MockPointRepository {
	mock := &MockPointRepository{ctrl: ctrl}
	mock.recorder = &MockPointRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPointRepository) EXPECT() *MockPointRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPointRepository) Create(ctx context.Context, city string) (entity.Point, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, city)
	ret0, _ := ret[0].(entity.Point)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPointRepositoryMockRecorder) Create(ctx, city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPointRepository)(nil).Create), ctx, city)
}

// GetAll mocks base method.
func (m *MockPointRepository) GetAll(ctx context.Context) ([]entity.Point, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]entity.Point)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPointRepositoryMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPointRepository)(nil).GetAll), ctx)
}

// MockReceptionRepository is a mock of ReceptionRepository interface.
type MockReceptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReceptionRepositoryMockRecorder
	isgomock struct{}
}

// MockReceptionRepositoryMockRecorder is the mock recorder for MockReceptionRepository.
type MockReceptionRepositoryMockRecorder struct {
	mock *MockReceptionRepository
}

// NewMockReceptionRepository creates a new mock instance.
func NewMockReceptionRepository(ctrl *gomock.Controller) *MockReceptionRepository {
	mock := &MockReceptionRepository{ctrl: ctrl}
	mock.recorder = &MockReceptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceptionRepository) EXPECT() *MockReceptionRepositoryMockRecorder {
	return m.recorder
}

// GetAllByPoint mocks base method.
func (m *MockReceptionRepository) GetAllByPoint(ctx context.Context, pointID uuid.UUID) ([]entity.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByPoint", ctx, pointID)
	ret0, _ := ret[0].([]entity.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByPoint indicates an expected call of GetAllByPoint.
func (mr *MockReceptionRepositoryMockRecorder) GetAllByPoint(ctx, pointID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByPoint", reflect.TypeOf((*MockReceptionRepository)(nil).GetAllByPoint), ctx, pointID)
}

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
	isgomock struct{}
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// GetAllByReception mocks base method.
func (m *MockProductRepository) GetAllByReception(ctx context.Context, receptionID uuid.UUID) ([]entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByReception", ctx, receptionID)
	ret0, _ := ret[0].([]entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByReception indicates an expected call of GetAllByReception.
func (mr *MockProductRepositoryMockRecorder) GetAllByReception(ctx, receptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByReception", reflect.TypeOf((*MockProductRepository)(nil).GetAllByReception), ctx, receptionID)
}

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
	isgomock struct{}
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// ErrInc mocks base method.
func (m *MockMetrics) ErrInc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ErrInc")
}

// ErrInc indicates an expected call of ErrInc.
func (mr *MockMetricsMockRecorder) ErrInc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrInc", reflect.TypeOf((*MockMetrics)(nil).ErrInc))
}

// Inc mocks base method.
func (m *MockMetrics) Inc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Inc")
}

// Inc indicates an expected call of Inc.
func (mr *MockMetricsMockRecorder) Inc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inc", reflect.TypeOf((*MockMetrics)(nil).Inc))
}
