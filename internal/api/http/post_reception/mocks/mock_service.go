// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go
//
// Generated by this command:
//
//	mockgen -source=contracts.go -destination=mocks/mock_service.go
//

// Package mock_post_reception is a generated GoMock package.
package mock_post_reception

import (
	context "context"
	reflect "reflect"

	entity "github.com/4udiwe/avito-pvz/internal/entity"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockReceptionService is a mock of ReceptionService interface.
type MockReceptionService struct {
	ctrl     *gomock.Controller
	recorder *MockReceptionServiceMockRecorder
	isgomock struct{}
}

// MockReceptionServiceMockRecorder is the mock recorder for MockReceptionService.
type MockReceptionServiceMockRecorder struct {
	mock *MockReceptionService
}

// NewMockReceptionService creates a new mock instance.
func NewMockReceptionService(ctrl *gomock.Controller) *MockReceptionService {
	mock := &MockReceptionService{ctrl: ctrl}
	mock.recorder = &MockReceptionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceptionService) EXPECT() *MockReceptionServiceMockRecorder {
	return m.recorder
}

// OpenReception mocks base method.
func (m *MockReceptionService) OpenReception(ctx context.Context, pointID uuid.UUID) (entity.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenReception", ctx, pointID)
	ret0, _ := ret[0].(entity.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenReception indicates an expected call of OpenReception.
func (mr *MockReceptionServiceMockRecorder) OpenReception(ctx, pointID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenReception", reflect.TypeOf((*MockReceptionService)(nil).OpenReception), ctx, pointID)
}
