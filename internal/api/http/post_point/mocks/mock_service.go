// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go
//
// Generated by this command:
//
//	mockgen -source=contracts.go -destination=mocks/mock_service.go
//

// Package mock_post_point is a generated GoMock package.
package mock_post_point

import (
	context "context"
	reflect "reflect"

	entity "github.com/4udiwe/avito-pvz/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockPointService is a mock of PointService interface.
type MockPointService struct {
	ctrl     *gomock.Controller
	recorder *MockPointServiceMockRecorder
	isgomock struct{}
}

// MockPointServiceMockRecorder is the mock recorder for MockPointService.
type MockPointServiceMockRecorder struct {
	mock *MockPointService
}

// NewMockPointService creates a new mock instance.
func NewMockPointService(ctrl *gomock.Controller) *MockPointService {
	mock := &MockPointService{ctrl: ctrl}
	mock.recorder = &MockPointServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPointService) EXPECT() *MockPointServiceMockRecorder {
	return m.recorder
}

// CreatePoint mocks base method.
func (m *MockPointService) CreatePoint(ctx context.Context, city string) (entity.Point, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePoint", ctx, city)
	ret0, _ := ret[0].(entity.Point)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePoint indicates an expected call of CreatePoint.
func (mr *MockPointServiceMockRecorder) CreatePoint(ctx, city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePoint", reflect.TypeOf((*MockPointService)(nil).CreatePoint), ctx, city)
}
