// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go
//
// Generated by this command:
//
//	mockgen -source=contracts.go -destination=mocks/repo_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/4udiwe/avito-pvz/internal/entity"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockProductsRepository is a mock of ProductsRepository interface.
type MockProductsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductsRepositoryMockRecorder
	isgomock struct{}
}

// MockProductsRepositoryMockRecorder is the mock recorder for MockProductsRepository.
type MockProductsRepositoryMockRecorder struct {
	mock *MockProductsRepository
}

// NewMockProductsRepository creates a new mock instance.
func NewMockProductsRepository(ctrl *gomock.Controller) *MockProductsRepository {
	mock := &MockProductsRepository{ctrl: ctrl}
	mock.recorder = &MockProductsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductsRepository) EXPECT() *MockProductsRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProductsRepository) Create(ctx context.Context, pointID uuid.UUID, productType entity.ProductType) (entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, pointID, productType)
	ret0, _ := ret[0].(entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProductsRepositoryMockRecorder) Create(ctx, pointID, productType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductsRepository)(nil).Create), ctx, pointID, productType)
}

// DeleteLastFromReception mocks base method.
func (m *MockProductsRepository) DeleteLastFromReception(ctx context.Context, pointID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLastFromReception", ctx, pointID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLastFromReception indicates an expected call of DeleteLastFromReception.
func (mr *MockProductsRepositoryMockRecorder) DeleteLastFromReception(ctx, pointID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLastFromReception", reflect.TypeOf((*MockProductsRepository)(nil).DeleteLastFromReception), ctx, pointID)
}

// MockReceptionRepository is a mock of ReceptionRepository interface.
type MockReceptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReceptionRepositoryMockRecorder
	isgomock struct{}
}

// MockReceptionRepositoryMockRecorder is the mock recorder for MockReceptionRepository.
type MockReceptionRepositoryMockRecorder struct {
	mock *MockReceptionRepository
}

// NewMockReceptionRepository creates a new mock instance.
func NewMockReceptionRepository(ctrl *gomock.Controller) *MockReceptionRepository {
	mock := &MockReceptionRepository{ctrl: ctrl}
	mock.recorder = &MockReceptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceptionRepository) EXPECT() *MockReceptionRepositoryMockRecorder {
	return m.recorder
}

// GetLastReceptionStatus mocks base method.
func (m *MockReceptionRepository) GetLastReceptionStatus(ctx context.Context, pointID uuid.UUID) (entity.ReceptionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastReceptionStatus", ctx, pointID)
	ret0, _ := ret[0].(entity.ReceptionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastReceptionStatus indicates an expected call of GetLastReceptionStatus.
func (mr *MockReceptionRepositoryMockRecorder) GetLastReceptionStatus(ctx, pointID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastReceptionStatus", reflect.TypeOf((*MockReceptionRepository)(nil).GetLastReceptionStatus), ctx, pointID)
}

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
	isgomock struct{}
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// ErrInc mocks base method.
func (m *MockMetrics) ErrInc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ErrInc")
}

// ErrInc indicates an expected call of ErrInc.
func (mr *MockMetricsMockRecorder) ErrInc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrInc", reflect.TypeOf((*MockMetrics)(nil).ErrInc))
}

// Inc mocks base method.
func (m *MockMetrics) Inc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Inc")
}

// Inc indicates an expected call of Inc.
func (mr *MockMetricsMockRecorder) Inc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inc", reflect.TypeOf((*MockMetrics)(nil).Inc))
}
